<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--配置命名空间，指向dao接口-->
<mapper namespace="priv.dengjl.mapper.StudentMapper">
    <!--所有修改数据表记录的操作都会返回int类型-->
    <!--增加学生，id为接口的对应方法名，parameterType为传入类型，用typeAliases配置可以避免全路径类型-->
    <insert id="addStu" parameterType="Student">
        INSERT INTO student (
            StudentNo,
            LoginPwd,
            StudentName,
            Sex,
            GradeId,
            Phone,
            Address,
            BornDate,
            Email,
            IdentityCard)
        VALUES (
            #{studentNo},
            #{loginPwd},
            #{studentName},
            #{sex},
            #{gradeId},
            #{phone},
            #{address},
            #{bornDate},
            #{email},
            #{identityCard}
        )
    </insert>
    <!--通过id查询学生，id为接口的对应方法名，parameterType为传入类型，resultType为返回的类型
    自动根据结果数量判断是否为List集合-->
    <select id="findStuById" parameterType="int" resultType="Student">
        SELECT
            StudentNo,
            LoginPwd,
            StudentName,
            Sex,
            GradeId,
            Phone,
            Address,
            BornDate,
            Email,
            IdentityCard
        FROM student
        WHERE StudentNo = #{studentNo}
    </select>
    <!--更新学生信息，如果dao接口的方法中的参数使用了注解，@Param("id") int studentNo
    #{id}和${id}都可以使用，不然只能使用#{id}，注解中的参数就是大括号中的名称-->
    <update id="updateStu" parameterType="Student">
        UPDATE student
        SET
            LoginPwd     = #{loginPwd},
            StudentName  = #{studentName},
            Sex          = #{sex},
            GradeId      = #{gradeId},
            Phone        = #{phone},
            Address      = #{address},
            BornDate     = #{bornDate},
            Email        = #{email},
            IdentityCard = #{identityCard}
        WHERE StudentNo = #{studentNo}
    </update>
    <!--删除学生信息-->
    <delete id="deleteStu" parameterType="int">
        DELETE FROM student
        WHERE StudentNo = #{studentNo}
    </delete>

    <!--多对一-->
    <!--需要在pojo中封装另一个数据表的对象或者集合，在配置中指出id和字段，未指定的在结果中为null-->
    <resultMap id="stuGrade" type="Student">
        <id property="studentNo" column="StudentNo"/>
        <result property="studentName" column="StudentName"/>
        <!--满足结果就存入，会根据结果数量判断是否需要集合存储-->
        <association property="grade" javaType="Grade">
            <id property="gradeId" column="GradeID"/>
            <result property="gradeName" column="GradeName"/>
        </association>
    </resultMap>
    <!--resultMap用于进行多表联查时封装字段到对象中，然后用ORM脱离关系型数据库，面向对象的方式获取数据-->
    <select id="getStudentsGrade" parameterType="int" resultMap="stuGrade">
        SELECT
            s.StudentNo,
            s.StudentName,
            g.GradeID,
            g.GradeName
        FROM
            grade AS g
            INNER JOIN student AS s ON s.GradeId = g.GradeID
    </select>

    <!--一对多-->
    <resultMap id="stuResults" type="Student">
        <id property="studentNo" column="StudentNo"/>
        <result property="studentName" column="StudentName"/>
        <!--直接将结果存入集合中-->
        <collection property="resultList" ofType="Result">
            <result property="studentResult" column="StudentResult"/>
            <!--一对一-->
            <association property="subject" javaType="Subject">
                <id property="subjectNo" column="SubjectNo"/>
                <result property="subjectName" column="SubjectName"/>
            </association>
        </collection>
    </resultMap>
    <select id="getStudentResults" parameterType="int" resultMap="stuResults">
        SELECT
            st.StudentNo,
            st.StudentName,
            re.StudentResult,
            su.SubjectNo,
            su.SubjectName
        FROM
            student AS st
            INNER JOIN result AS re ON st.StudentNo = re.StudentNo
            INNER JOIN `subject` AS su ON re.SubjectNo = su.SubjectNo
        WHERE
            st.StudentNo = #{studentNo}
    </select>
    
     <!--通过id查询学生，id为接口的对应方法名，parameterType为传入类型，resultType为返回的类型
    自动根据结果数量判断是否为List集合-->
    <select id="getStudents" resultType="Student">
        SELECT *
        FROM student
    </select>
</mapper>
